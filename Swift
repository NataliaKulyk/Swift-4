import Foundation

var accountBalance = 1000
let concurrentQueue = DispatchQueue(label: "com.example.concurrentQueue", attributes: .concurrent)
let balanceAccessQueue = DispatchQueue(label: "com.example.balanceAccessQueue")

func withdraw(amount: Int) {
    concurrentQueue.async {
        balanceAccessQueue.sync {
            if accountBalance >= amount {
                // Simulate delay for demonstration purposes
                Thread.sleep(forTimeInterval: 1)
                accountBalance -= amount
                print("Withdrawal successful. Remaining balance: \(accountBalance)")
            } else {
                print("Insufficient funds")
            }
        }
    }
}

func refillBalance(amount: Int) {
    concurrentQueue.async {
        balanceAccessQueue.sync {
            // Simulate delay for demonstration purposes
            Thread.sleep(forTimeInterval: 1)
            accountBalance += amount
            print("Refill successful. Remaining balance: \(accountBalance)")
        }
    }
}

// Simulate multiple withdrawals happening concurrently
for _ in 1...5 {
    withdraw(amount: 150)
    refillBalance(amount: 208)
}
